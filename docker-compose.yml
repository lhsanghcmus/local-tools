services:
  mongodb-primary:
    image: mongodb/mongodb-community-server:8.0.9-ubuntu2204
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - GLIBC_TUNABLES=glibc.pthread.rseq=0
    volumes:
      - 'mongodb_master_data:/data/db'
      - './scripts/mongosetup/mongo-keyfile:/etc/mongo-keyfile:ro'
    ports:
        - "30000:30000"
    networks:
      - mongo-cluster
    command: ["--replSet", "rs0", "--bind_ip_all", "--keyFile", "/etc/mongo-keyfile", "--port", "30000"]

  mongodb-secondary:
    image: mongodb/mongodb-community-server:8.0.9-ubuntu2204
    depends_on:
      - mongodb-primary
    environment:
      - GLIBC_TUNABLES=glibc.pthread.rseq=0
    ports:
      - "30001:30001"
    volumes:
      - './scripts/mongosetup/mongo-keyfile:/etc/mongo-keyfile:ro'
    networks:
      - mongo-cluster
    command: ["--replSet", "rs0", "--bind_ip_all", "--keyFile", "/etc/mongo-keyfile", "--port", "30001"]

  mongodb-arbiter:
    image: mongodb/mongodb-community-server:8.0.9-ubuntu2204
    depends_on:
      - mongodb-primary
      - mongodb-secondary
    environment:
      - GLIBC_TUNABLES=glibc.pthread.rseq=0
    networks:
      - mongo-cluster
    volumes:
      - './scripts/mongosetup/mongo-keyfile:/etc/mongo-keyfile:ro'
    command: [ "--replSet", "rs0", "--bind_ip_all", "--keyFile", "/etc/mongo-keyfile", "--port", "30002"]

  mongodb-setup:
    image: mongodb/mongodb-community-server:8.0.9-ubuntu2204
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
    volumes:
      - ./scripts/mongosetup:/scripts/
    restart: "no"
    entrypoint: [ "bash", "/scripts/mongo_setup.sh" ]
    networks:
      - mongo-cluster

  redis:
    image: redis:8.0.2-alpine3.21
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  kafka-0:
    image: confluentinc/cp-kafka:7.9.1
    ports:
      - "9992:9092"
    environment:
      KAFKA_NODE_ID: 0
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://kafka-0:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://kafka-0:29093'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka-0:29092,EXTERNAL://localhost:9992'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '0@kafka-0:29093,1@kafka-1:29093,2@kafka-2:29093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MyClusterIdABCD1234'
    networks:
      - kafka-cluster

  kafka-1:
    image: confluentinc/cp-kafka:7.9.1
    ports:
      - "9993:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://kafka-1:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://kafka-1:29093'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka-1:29092,EXTERNAL://localhost:9993'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '0@kafka-0:29093,1@kafka-1:29093,2@kafka-2:29093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MyClusterIdABCD1234'
    networks:
      - kafka-cluster

  kafka-2:
    image: confluentinc/cp-kafka:7.9.1
    ports:
      - "9994:9092"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://kafka-2:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://kafka-2:29093'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka-2:29092,EXTERNAL://localhost:9994'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '0@kafka-0:29093,1@kafka-1:29093,2@kafka-2:29093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MyClusterIdABCD1234'
    networks:
      - kafka-cluster

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=kraft-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-0:29092,kafka-1:29092,kafka-2:29092
    depends_on:
      - kafka-0
      - kafka-1
      - kafka-2
    networks:
      - kafka-cluster

  postgres:
    image: postgres:17.5
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - TEMPORAL_PASSWORD=${TEMPORAL_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-temporal.sh:/docker-entrypoint-initdb.d/init-temporal.sh:ro
      - ./scripts/init-temporal.sql:/scripts/init-temporal.sql:ro
    networks:
      - postgres

  temporal:
    container_name: temporal
    image: temporalio/auto-setup:1.27.2
    ports:
      - "7233:7233" # gRPC port, client backend will connect to this port
    networks:
      - postgres
    depends_on:
      - postgres
    environment:
      - DB=postgres12
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=${TEMPORAL_PASSWORD}
      - POSTGRES_SEEDS=postgres
      - DB_PORT=5432
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
      - DYNAMIC_CONFIG_FILE_PATH=/etc/temporal/config/temporal.yaml
      - SKIP_DB_CREATE=true
      - VISIBILITY_DBNAME=temporal_visibility
      - DBNAME=temporal
    volumes:
      - ./config/temporal.yaml:/etc/temporal/config/temporal.yaml

  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:v2.37.4
    networks:
      - postgres
    ports:
      - 8090:8080

  elasticsearch:
    image: elasticsearch:9.0.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_PASSWORD=${ES_PASSWORD}
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - elastic

  kibana-user-creator:
    image: curlimages/curl:8.13.0
    entrypoint: ["/scripts/create-kibana-user.sh"]
    networks:
      - elastic
    depends_on:
      - elasticsearch
    volumes:
      - ./scripts/create-kibana-user.sh:/scripts/create-kibana-user.sh:ro
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ES_PASSWORD}
      - ES_HOST=http://elasticsearch:9200
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}

  kibana:
    image: kibana:9.0.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - KIBANA_USER=${KIBANA_USER}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    ports:
      - "5601:5601"
    networks:
      - elastic
    depends_on:
      - elasticsearch
      - kibana-user-creator
    volumes:
      - ./config/kibana.yaml:/usr/share/kibana/config/kibana.yml:ro

volumes:
  mongodb_master_data:
    driver: local
    driver_opts:
      type: none
      device: ./data/mongodb_primary
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ./data/redis
      o: bind
  kafka_0_data:
    driver: local
    driver_opts:
      type: none
      device: ./data/kafka0
      o: bind
  kafka_1_data:
    driver: local
    driver_opts:
      type: none
      device: ./data/kafka1
      o: bind
  kafka_2_data:
    driver: local
    driver_opts:
      type: none
      device: ./data/kafka2
      o: bind
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ./data/postgres
      o: bind
  esdata:
    driver: local
    driver_opts:
      type: none
      device: ./data/elasticsearch
      o: bind

networks:
  mongo-cluster:
    driver: bridge
  kafka-cluster:
    driver: bridge
  postgres:
    driver: bridge
  elastic:
    driver: bridge